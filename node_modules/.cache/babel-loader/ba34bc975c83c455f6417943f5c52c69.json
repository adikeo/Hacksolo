{"ast":null,"code":"import MidiNumbers from './MidiNumbers';\n\nfunction createKeyboardShortcuts({\n  firstNote,\n  lastNote,\n  keyboardConfig\n}) {\n  let currentMidiNumber = firstNote;\n  let naturalKeyIndex = 0;\n  let keyboardShortcuts = [];\n\n  while ( // There are still keys to be assigned\n  naturalKeyIndex < keyboardConfig.length && // Note to be assigned does not surpass range\n  currentMidiNumber <= lastNote) {\n    const key = keyboardConfig[naturalKeyIndex];\n\n    const _MidiNumbers$getAttri = MidiNumbers.getAttributes(currentMidiNumber),\n          isAccidental = _MidiNumbers$getAttri.isAccidental;\n\n    if (isAccidental) {\n      keyboardShortcuts.push({\n        key: key.flat,\n        midiNumber: currentMidiNumber\n      });\n    } else {\n      keyboardShortcuts.push({\n        key: key.natural,\n        midiNumber: currentMidiNumber\n      });\n      naturalKeyIndex += 1;\n    }\n\n    currentMidiNumber += 1;\n  }\n\n  return keyboardShortcuts;\n}\n\nexport default {\n  create: createKeyboardShortcuts,\n  HOME_ROW: [{\n    natural: 'a',\n    flat: 'q',\n    sharp: 'w'\n  }, {\n    natural: 's',\n    flat: 'w',\n    sharp: 'e'\n  }, {\n    natural: 'd',\n    flat: 'e',\n    sharp: 'r'\n  }, {\n    natural: 'f',\n    flat: 'r',\n    sharp: 't'\n  }, {\n    natural: 'g',\n    flat: 't',\n    sharp: 'y'\n  }, {\n    natural: 'h',\n    flat: 'y',\n    sharp: 'u'\n  }, {\n    natural: 'j',\n    flat: 'u',\n    sharp: 'i'\n  }, {\n    natural: 'k',\n    flat: 'i',\n    sharp: 'o'\n  }, {\n    natural: 'l',\n    flat: 'o',\n    sharp: 'p'\n  }, {\n    natural: 'ç',\n    flat: 'p',\n    sharp: '+'\n  }, {\n    natural: \"º\",\n    flat: '+',\n    sharp: \"´\"\n  }]\n};","map":{"version":3,"sources":["/media/sf_E__/Onedrive/WCS/Projects/Project_4 Solo Hackathon/src/keyboard.js"],"names":["MidiNumbers","createKeyboardShortcuts","firstNote","lastNote","keyboardConfig","currentMidiNumber","naturalKeyIndex","keyboardShortcuts","length","key","getAttributes","isAccidental","push","flat","midiNumber","natural","create","HOME_ROW","sharp"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;;AAEA,SAASC,uBAAT,CAAiC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,QAAb;AAAuBC,EAAAA;AAAvB,CAAjC,EAA0E;AACxE,MAAIC,iBAAiB,GAAGH,SAAxB;AACA,MAAII,eAAe,GAAG,CAAtB;AACA,MAAIC,iBAAiB,GAAG,EAAxB;;AAEA,UACE;AACAD,EAAAA,eAAe,GAAGF,cAAc,CAACI,MAAjC,IACA;AACAH,EAAAA,iBAAiB,IAAIF,QAJvB,EAKE;AACA,UAAMM,GAAG,GAAGL,cAAc,CAACE,eAAD,CAA1B;;AADA,kCAEyBN,WAAW,CAACU,aAAZ,CAA0BL,iBAA1B,CAFzB;AAAA,UAEQM,YAFR,yBAEQA,YAFR;;AAGA,QAAIA,YAAJ,EAAkB;AAChBJ,MAAAA,iBAAiB,CAACK,IAAlB,CAAuB;AACrBH,QAAAA,GAAG,EAAEA,GAAG,CAACI,IADY;AAErBC,QAAAA,UAAU,EAAET;AAFS,OAAvB;AAID,KALD,MAKO;AACLE,MAAAA,iBAAiB,CAACK,IAAlB,CAAuB;AACrBH,QAAAA,GAAG,EAAEA,GAAG,CAACM,OADY;AAErBD,QAAAA,UAAU,EAAET;AAFS,OAAvB;AAIAC,MAAAA,eAAe,IAAI,CAAnB;AACD;;AACDD,IAAAA,iBAAiB,IAAI,CAArB;AACD;;AACD,SAAOE,iBAAP;AACD;;AAED,eAAe;AACbS,EAAAA,MAAM,EAAEf,uBADK;AAEfgB,EAAAA,QAAQ,EAAE,CACN;AAAEF,IAAAA,OAAO,EAAE,GAAX;AAAgBF,IAAAA,IAAI,EAAE,GAAtB;AAA2BK,IAAAA,KAAK,EAAE;AAAlC,GADM,EAEN;AAAEH,IAAAA,OAAO,EAAE,GAAX;AAAgBF,IAAAA,IAAI,EAAE,GAAtB;AAA2BK,IAAAA,KAAK,EAAE;AAAlC,GAFM,EAGN;AAAEH,IAAAA,OAAO,EAAE,GAAX;AAAgBF,IAAAA,IAAI,EAAE,GAAtB;AAA2BK,IAAAA,KAAK,EAAE;AAAlC,GAHM,EAIN;AAAEH,IAAAA,OAAO,EAAE,GAAX;AAAgBF,IAAAA,IAAI,EAAE,GAAtB;AAA2BK,IAAAA,KAAK,EAAE;AAAlC,GAJM,EAKN;AAAEH,IAAAA,OAAO,EAAE,GAAX;AAAgBF,IAAAA,IAAI,EAAE,GAAtB;AAA2BK,IAAAA,KAAK,EAAE;AAAlC,GALM,EAMN;AAAEH,IAAAA,OAAO,EAAE,GAAX;AAAgBF,IAAAA,IAAI,EAAE,GAAtB;AAA2BK,IAAAA,KAAK,EAAE;AAAlC,GANM,EAON;AAAEH,IAAAA,OAAO,EAAE,GAAX;AAAgBF,IAAAA,IAAI,EAAE,GAAtB;AAA2BK,IAAAA,KAAK,EAAE;AAAlC,GAPM,EAQN;AAAEH,IAAAA,OAAO,EAAE,GAAX;AAAgBF,IAAAA,IAAI,EAAE,GAAtB;AAA2BK,IAAAA,KAAK,EAAE;AAAlC,GARM,EASN;AAAEH,IAAAA,OAAO,EAAE,GAAX;AAAgBF,IAAAA,IAAI,EAAE,GAAtB;AAA2BK,IAAAA,KAAK,EAAE;AAAlC,GATM,EAUN;AAAEH,IAAAA,OAAO,EAAE,GAAX;AAAgBF,IAAAA,IAAI,EAAE,GAAtB;AAA2BK,IAAAA,KAAK,EAAE;AAAlC,GAVM,EAWN;AAAEH,IAAAA,OAAO,EAAE,GAAX;AAAgBF,IAAAA,IAAI,EAAE,GAAtB;AAA2BK,IAAAA,KAAK,EAAE;AAAlC,GAXM;AAFK,CAAf","sourcesContent":["import MidiNumbers from './MidiNumbers';\n\nfunction createKeyboardShortcuts({ firstNote, lastNote, keyboardConfig }) {\n  let currentMidiNumber = firstNote;\n  let naturalKeyIndex = 0;\n  let keyboardShortcuts = [];\n\n  while (\n    // There are still keys to be assigned\n    naturalKeyIndex < keyboardConfig.length &&\n    // Note to be assigned does not surpass range\n    currentMidiNumber <= lastNote\n  ) {\n    const key = keyboardConfig[naturalKeyIndex];\n    const { isAccidental } = MidiNumbers.getAttributes(currentMidiNumber);\n    if (isAccidental) {\n      keyboardShortcuts.push({\n        key: key.flat,\n        midiNumber: currentMidiNumber,\n      });\n    } else {\n      keyboardShortcuts.push({\n        key: key.natural,\n        midiNumber: currentMidiNumber,\n      });\n      naturalKeyIndex += 1;\n    }\n    currentMidiNumber += 1;\n  }\n  return keyboardShortcuts;\n}\n\nexport default {\n  create: createKeyboardShortcuts,\nHOME_ROW: [\n    { natural: 'a', flat: 'q', sharp: 'w' },\n    { natural: 's', flat: 'w', sharp: 'e' },\n    { natural: 'd', flat: 'e', sharp: 'r' },\n    { natural: 'f', flat: 'r', sharp: 't' },\n    { natural: 'g', flat: 't', sharp: 'y' },\n    { natural: 'h', flat: 'y', sharp: 'u' },\n    { natural: 'j', flat: 'u', sharp: 'i' },\n    { natural: 'k', flat: 'i', sharp: 'o' },\n    { natural: 'l', flat: 'o', sharp: 'p' },\n    { natural: 'ç', flat: 'p', sharp: '+' },\n    { natural: \"º\", flat: '+', sharp: \"´\" },\n  ],\n};"]},"metadata":{},"sourceType":"module"}